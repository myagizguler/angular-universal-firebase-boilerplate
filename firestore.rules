service cloud.firestore {
  match /databases/{database}/documents {
  
  	function userData() {
       // return get(/databases/$(database)/documents/fl_users/9g3gCMB5mbXhY7boZNhQCVBvQ9I2).data;
       return '1';
    }
    
    function userPermissionsProfile(profileId) {
       return get(/databases/$(database)/documents/fl_permissions/$(profileId)).data;
    }
  
  	function getPermission(profileId, dataType, action) {
    	profileId is '1';
			return userPermissionsProfile(profileId)[dataType].production.news[action];
    }
    
    match /{collection}/{document=**} {
      allow read: if getPermission(userData(), 'content', 'view');
      allow write;
    }
  }
}

const USER = {
	id: 'USER_ID',
	permissionsId: 'PERMISSIONS_1'
}

const permissions = {
	id: 'PERMISSIONS_1',
	content: {
		view: true,
		create: false,
		update: false,
		delete: false,
	}
}

service cloud.firestore {
  match /databases/{database}/documents {
  
  	function userPermissionsId() {
       return get(/databases/$(database)/documents/users/USER_ID).data.permissionsId;
    }
    
    function userPermissions(id) {
       return get(/databases/$(database)/documents/permissions/$(id)).data;
    }
  
  	function getPermission(profileId, dataType, action) {
		return userPermissions(profileId)[dataType][action];
    }
    
    match /{collection}/{document=**} {
	
		// The below code returns true:
		// allow read: if userPermissionsId() == 'PERMISSIONS_1'
		// The above proves that the function userPermissionsId() is working properly and returning the permissions ID.

		// The below code also returns true:
		// allow read: if getPermission('PERMISSIONS_1', 'content', 'view');
		// The above proves that the function getPermission() is working properly when recieving a correct ID.

		// HOWEVER!! Combining the 2 won't work:
		allow read: if getPermission(userPermissionsId(), 'content', 'view');
		// This will throw the following error in the simulator:
		// Error running simulation â€” Error: simulator.rules line [9], column [15]. Function not found error: Name: [get].; Error: Invalid argument provided to call. Function: [get], Argument: ["||invalid_argument||"]

    }
  }
}